package main.java.server;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import main.java.component.customJButton.JButtonColor;
import main.java.server.listeners.MainServerListener;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class ServerFrameApp extends JFrame {
    public JPanel mainPanel;
    public JList listOrder;
    public JButton exitBtn;
    public JPanel rightPanel;
    public JComboBox userCombo;
    public JPanel leftPanel;
    public JButton viewMapButton;
    public JPanel detailsPanel;
    public JPanel viewMapPanel;
    public JPanel exitArea;
    public JPanel topArea;
    public JPanel exitWrapper;
    public JPanel listOrderWrapper;

    private int appWidth = 800;
    private int appHeight = 600;

    MainServerListener msl;

    public ServerFrameApp(MainServerListener msl) {
        this.msl = msl;
        $$$setupUI$$$();
        setContentPane(mainPanel);
        assignListeners();

    }

    public int getAppWidth() {
        return appWidth;
    }

    public void setAppWidth(int appWidth) {
        this.appWidth = appWidth;
    }

    public int getAppHeight() {
        return appHeight;
    }

    public void setAppHeight(int appHeight) {
        this.appHeight = appHeight;
    }

    private void createUIComponents() {
        mainPanel = new JPanel();
        mainPanel.setOpaque(true);
        mainPanel.setBackground(Color.BLUE);


        rightPanel = new JPanel();
        exitBtn = new JButtonColor("Exit", Color.RED, Color.WHITE);
//        mapPanel.add(new JFrame());
    }

    private void assignListeners() {
        exitBtn.addActionListener(this.msl);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel.setLayout(new BorderLayout(0, 0));
        mainPanel.setAutoscrolls(false);
        mainPanel.setBackground(new Color(-1315854));
        mainPanel.setDoubleBuffered(true);
        mainPanel.setEnabled(true);
        mainPanel.setFocusCycleRoot(false);
        mainPanel.setFocusTraversalPolicyProvider(false);
        mainPanel.setFocusable(false);
        mainPanel.setInheritsPopupMenu(false);
        mainPanel.setOpaque(true);
        mainPanel.setRequestFocusEnabled(false);
        mainPanel.setVerifyInputWhenFocusTarget(false);
        mainPanel.setVisible(true);
        rightPanel.setLayout(new BorderLayout(0, 0));
        rightPanel.setOpaque(false);
        mainPanel.add(rightPanel, BorderLayout.CENTER);
        viewMapPanel = new JPanel();
        viewMapPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        viewMapPanel.setDoubleBuffered(false);
        viewMapPanel.setEnabled(true);
        viewMapPanel.setFocusable(false);
        viewMapPanel.setOpaque(true);
        viewMapPanel.setRequestFocusEnabled(false);
        viewMapPanel.setVerifyInputWhenFocusTarget(false);
        viewMapPanel.setVisible(true);
        rightPanel.add(viewMapPanel, BorderLayout.SOUTH);
        viewMapButton = new JButton();
        viewMapButton.setText("View Map");
        viewMapPanel.add(viewMapButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        detailsPanel = new JPanel();
        detailsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        detailsPanel.setOpaque(true);
        rightPanel.add(detailsPanel, BorderLayout.CENTER);
        leftPanel = new JPanel();
        leftPanel.setLayout(new BorderLayout(0, 0));
        leftPanel.setOpaque(false);
        mainPanel.add(leftPanel, BorderLayout.WEST);
        topArea = new JPanel();
        topArea.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        leftPanel.add(topArea, BorderLayout.NORTH);
        userCombo = new JComboBox();
        topArea.add(userCombo, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(200, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Ayuthaya", -1, 12, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("User List");
        topArea.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        exitWrapper = new JPanel();
        exitWrapper.setLayout(new GridLayoutManager(1, 1, new Insets(10, 0, 10, 0), -1, 100));
        leftPanel.add(exitWrapper, BorderLayout.SOUTH);
        exitArea = new JPanel();
        exitArea.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        exitWrapper.add(exitArea, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        Font exitBtnFont = this.$$$getFont$$$("Inconsolata for Powerline", Font.BOLD, 14, exitBtn.getFont());
        if (exitBtnFont != null) exitBtn.setFont(exitBtnFont);
        exitBtn.setText("Exit");
        exitBtn.setVerifyInputWhenFocusTarget(false);
        exitArea.add(exitBtn, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        listOrderWrapper = new JPanel();
        listOrderWrapper.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        leftPanel.add(listOrderWrapper, BorderLayout.CENTER);
        listOrderWrapper.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        listOrder = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        listOrder.setModel(defaultListModel1);
        listOrder.setOpaque(true);
        listOrder.setPreferredSize(new Dimension(200, 0));
        listOrderWrapper.add(listOrder, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
