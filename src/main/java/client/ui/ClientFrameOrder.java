package main.java.client.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import main.java.client.ClientFrameMain;
import main.java.client.listeners.ClientOrderListener;
import main.java.component.customJPanel.JPanelItemDisplay;
import main.java.model.*;
import main.java.service.OrderService;

import javax.swing.*;
import java.awt.*;
import java.net.URL;

public class ClientFrameOrder extends JFrame {

    private int appWidth = 800;
    private int appHeight = 600;

    private ClientModel model;

    private JPanel mainPanel;
    private JList listOrder;
    private JPanel userPanel;
    private JPanel userItemList;
    private JPanel userInfoList;
    private JPanel controlArea;
    private JButton backButton;
    private JPanel userArea;
    private JPanel userWrapper;
    private JPanel locationWrapper;
    private ClientOrderListener col;

    public ClientFrameOrder(ClientModel mo, ClientOrderListener col) {
        this.col = col;
        this.model = mo;

        $$$setupUI$$$();
        this.setContentPane(mainPanel);
        assignListeners();
    }

    public int getAppWidth() {
        return appWidth;
    }

    public void setAppWidth(int appWidth) {
        this.appWidth = appWidth;
    }

    public int getAppHeight() {
        return appHeight;
    }

    public void setAppHeight(int appHeight) {
        this.appHeight = appHeight;
    }

    private void assignListeners() {
        backButton.addActionListener(this.col);
    }

    private void createUIComponents() {

        System.out.println("Called in ClientFrame Order");
        DefaultListModel listModel = new DefaultListModel();
        this.listOrder = new JList(listModel);
        backButton = new JButton("Back");

        if (this.model.getOrderList().getHead() != null) {
            GenericNode<Order> gnGood = this.model.getOrderList().getHead();
            while (gnGood != null) {
                listModel.addElement(gnGood.data.displayOrder());
                gnGood = gnGood.next;
            }
        }

        // Add list
        this.userItemList = new JPanel(new FlowLayout(FlowLayout.LEFT));
        URL url = this.getClass().getResource("../../../resources/images/orange_pic.png");

        for (int i = 0; i < 10; i++) {
            this.userItemList.add(new JPanelItemDisplay(url, 120, 120, i + ""));
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        listOrder.setPreferredSize(new Dimension(200, 0));
        mainPanel.add(listOrder, BorderLayout.WEST);
        userPanel = new JPanel();
        userPanel.setLayout(new BorderLayout(0, 0));
        mainPanel.add(userPanel, BorderLayout.CENTER);
        userInfoList = new JPanel();
        userInfoList.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        userPanel.add(userInfoList, BorderLayout.NORTH);
        userArea = new JPanel();
        userArea.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        userInfoList.add(userArea, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        userWrapper = new JPanel();
        userWrapper.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        userArea.add(userWrapper, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("User:");
        userWrapper.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(17, 16), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Temp");
        userWrapper.add(label2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        locationWrapper = new JPanel();
        locationWrapper.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        userArea.add(locationWrapper, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Location:");
        locationWrapper.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(17, 16), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("(0,0)");
        locationWrapper.add(label4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        userPanel.add(userItemList, BorderLayout.CENTER);
        controlArea = new JPanel();
        controlArea.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(controlArea, BorderLayout.SOUTH);
        backButton.setText("Back");
        controlArea.add(backButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
