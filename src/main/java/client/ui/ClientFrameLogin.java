package main.java.client.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import main.java.client.listeners.ClientLoginListener;
import main.java.component.JLabelC;
import main.java.component.customJPanel.JPanelBackground;

import javax.swing.*;
import java.awt.*;
import java.net.URL;

public class ClientFrameLogin extends JFrame {

    private int appWidth = 800;
    private int appHeight = 500;

    private JPanel mainPanel;
    private JButton loginBtn;
    private JLabel titleLabel;
    private JLabel usrLabel;
    private JLabel passLabel;
    private JPanel loginPanel;
    private JPanel titlePanel;
    private JPanel userWrapper;
    private JTextField username;
    private JPasswordField password;
    private JPanel userLineWrapper;

    ClientLoginListener cll;

    /**
     * Constructor
     */
    public ClientFrameLogin(ClientLoginListener cll) {
        this.cll = cll;
        $$$setupUI$$$();
        this.setContentPane(mainPanel);
        assignListeners();
    }

    /**
     * Custom UI components when creating form
     */
    private void createUIComponents() {
//        String path = System.getProperty("user.dir") + "/src/main/resources/images/background.jpg";
        URL url = this.getClass().getResource("../../../resources/images/background.jpg");
        System.out.println(url);
        mainPanel = new JPanelBackground(url);

        loginBtn = new JButton();
        username = new JTextField();
        password = new JPasswordField();
        titleLabel = new JLabelC("LOCAL DELIVERY");
        titleLabel.setSize(new Dimension(200, 300));

    }

    private void assignListeners() {

        loginBtn.addActionListener(cll);
        username.addActionListener(cll);
        password.addActionListener(cll);
    }

    public int getAppWidth() {
        return appWidth;
    }

    public void setAppWidth(int appWidth) {
        this.appWidth = appWidth;
    }

    public int getAppHeight() {
        return appHeight;
    }

    public void setAppHeight(int appHeight) {
        this.appHeight = appHeight;
    }

    public String getUsernameValue() {
        return username.getText();
    }

    public char[] getPasswordValue() {
        return password.getPassword();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setOpaque(true);
        userWrapper = new JPanel();
        userWrapper.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        userWrapper.setOpaque(false);
        mainPanel.add(userWrapper, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        userLineWrapper = new JPanel();
        userLineWrapper.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        userLineWrapper.setOpaque(false);
        userWrapper.add(userLineWrapper, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        usrLabel = new JLabel();
        Font usrLabelFont = this.$$$getFont$$$("Courier", Font.BOLD, 16, usrLabel.getFont());
        if (usrLabelFont != null) usrLabel.setFont(usrLabelFont);
        usrLabel.setForeground(new Color(-593420));
        usrLabel.setOpaque(false);
        usrLabel.setText("Username:");
        userLineWrapper.add(usrLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        username.setBackground(new Color(-593420));
        Font usernameFont = this.$$$getFont$$$("Anonymous Pro for Powerline", -1, 12, username.getFont());
        if (usernameFont != null) username.setFont(usernameFont);
        username.setOpaque(true);
        userLineWrapper.add(username, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 30), null, 0, false));
        passLabel = new JLabel();
        passLabel.setEnabled(true);
        Font passLabelFont = this.$$$getFont$$$("Courier", Font.BOLD, 16, passLabel.getFont());
        if (passLabelFont != null) passLabel.setFont(passLabelFont);
        passLabel.setForeground(new Color(-593420));
        passLabel.setText("Password:");
        userLineWrapper.add(passLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        password.setBackground(new Color(-593420));
        Font passwordFont = this.$$$getFont$$$("Anonymous Pro for Powerline", -1, 12, password.getFont());
        if (passwordFont != null) password.setFont(passwordFont);
        password.setOpaque(true);
        userLineWrapper.add(password, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 30), null, 0, false));
        titlePanel = new JPanel();
        titlePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        titlePanel.setOpaque(false);
        mainPanel.add(titlePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        titleLabel.setEnabled(true);
        Font titleLabelFont = this.$$$getFont$$$("Toppan Bunkyu Midashi Gothic", Font.BOLD, 48, titleLabel.getFont());
        if (titleLabelFont != null) titleLabel.setFont(titleLabelFont);
        titleLabel.setForeground(new Color(-270858));
        titleLabel.setOpaque(false);
        titleLabel.setVerifyInputWhenFocusTarget(true);
        titlePanel.add(titleLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(37, 74), null, 0, false));
        loginPanel = new JPanel();
        loginPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        loginPanel.setOpaque(false);
        mainPanel.add(loginPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        loginBtn.setAutoscrolls(false);
        loginBtn.setBackground(new Color(-12762020));
        loginBtn.setBorderPainted(false);
        loginBtn.setContentAreaFilled(true);
        loginBtn.setDoubleBuffered(false);
        loginBtn.setEnabled(true);
        loginBtn.setFocusPainted(true);
        loginBtn.setFocusable(true);
        Font loginBtnFont = this.$$$getFont$$$("Ayuthaya", -1, 16, loginBtn.getFont());
        if (loginBtnFont != null) loginBtn.setFont(loginBtnFont);
        loginBtn.setForeground(new Color(-593420));
        loginBtn.setHideActionText(false);
        loginBtn.setOpaque(true);
        loginBtn.setRequestFocusEnabled(false);
        loginBtn.setRolloverEnabled(false);
        loginBtn.setSelected(false);
        loginBtn.setText("Login");
        loginBtn.setVerifyInputWhenFocusTarget(true);
        loginBtn.setVisible(true);
        loginPanel.add(loginBtn, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 30), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
